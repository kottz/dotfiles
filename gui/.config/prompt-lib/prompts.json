[
  {
    "id": 1,
    "title": "Socratic Tutor",
    "text": "I would benefit most from an explanation style in which you frequently pause to confirm, via asking me test questions, that I've understood your explanations so far. Particularly helpful are test questions related to simple, explicit examples. When you pause and ask me a test question, do not continue the explanation until I have answered the questions to your satisfaction. I.e. do not keep generating the explanation, actually wait for me to respond first. Thanks!"
  },
  {
    "id": 2,
    "title": "New repo design",
    "text": "Take the role of Socratic Questioner and ask me about my software idea and use my answers to provide all requested detail for this 'Comprehensive Software Design and Specification Document Template for Code Generation'. If I am unsure about an answer then choose the option that would be most popular for this project. Think through this step by step and DO NOT WRITE ANY CODE UNTIL THIS DOCUMENT HAS BEEN COMPLETED AND THE COMPLETE DOCUMENT HAS BEEN APPROVED BY ME. Ask me these questions one at a time and record my answers. In the first pass, create an outline. Then in the second pass create outlines within outlines\n\nComprehensive Software Design and Specification Document Template for Code Generation\nStarting Idea: [what is the high level idea for this project]\nProject Title: [Project Name]\nProject Overview\n[Briefly describe the purpose and goals of the software project. Highlight its key features and benefits.]\n\nProject Goals\n[Goal 1]\n\n[Goal 2]\n\n[Goal 3]\n\n...\n\nTarget Audience\n[Identify the primary users or groups who will benefit from this software.]\n\nFunctional Requirements\nInput Handling:\n[Describe the types of input the software will accept (e.g., file paths, URLs, data formats).]\n\n[Specify how the software will determine the input type and handle different formats.]\n\nData Processing:\n[Detail the specific actions to be performed on the input data (e.g., extraction, transformation, analysis).]\n\n[Describe any algorithms, libraries, or external services that will be used.]\n\nOutput Generation:\n[Specify the format(s) of the output data or results.]\n\n[Describe how the output will be presented to the user (e.g., files, displays, API responses).]\n\nError Handling:\n[List the potential errors or exceptions that the software might encounter.]\n\n[Explain how each error will be handled (e.g., logging, retrying, notifying the user).]\n\nAdditional Features (Optional):\n[Describe any optional or advanced features that could be included.]\n\nNon-Functional Requirements\nPerformance: [Define performance expectations (e.g., response times, processing speed).]\n\nReliability: [Specify reliability goals (e.g., uptime, data integrity).]\n\nUsability: [Outline the desired user experience and interface design.]\n\nSecurity: [Address any security concerns or requirements (e.g., data protection, authentication).]\n\nScalability: [Describe how the software should handle increased loads or data volumes.]\n\nConstraints\nTime: [Specify any deadlines or time constraints for project completion. Be realistic and consider the scope of the project.]\n\nBudget: [Outline any financial limitations that may affect the project's scope or choice of technologies.]\n\nTechnology: [List any specific technologies, tools, frameworks, or libraries that must be used (or avoided) due to compatibility requirements, licensing restrictions, or organizational policies.]\n\nRegulatory: [Identify any legal or regulatory requirements that must be met, such as data privacy laws, industry standards, or accessibility guidelines.]\n\nResource Limitations: [Describe any constraints on hardware (e.g., available processing power, memory), software (e.g., operating system compatibility), or personnel (e.g., number of developers, their skill sets) that might impact the project's feasibility or implementation.]\n\nPseudocode\nfunction [MethodName]([ParameterType] [ParameterName], ...):\n\n// Detailed steps of the algorithm or logic.\n\n// Use comments to explain the purpose of each step.\n\nUser Stories\nAs a [user role], I want to [goal] so that [reason].\n\nAs a [user role], I want to [goal] so that [reason].\n\n... (add more user stories as needed)\n\nFlowchart\n[Include a visual diagram of the program's flow, showing the sequence of operations, decision points, and loops.]\n\nLibraries and Dependencies\n[List the external libraries or frameworks that the project will depend on, along with their versions and purposes.]\n\nTechnical Specifications\nProgramming Language: [Specify the programming language to be used (e.g., Python, Java, C#).]\n\nOperating System: [List the target operating systems (e.g., Windows, macOS, Linux).]\n\nHardware Requirements: [Define any minimum or recommended hardware specifications.]\n\nTesting and Validation\n[Describe the testing strategy, including unit tests, integration tests, and user acceptance tests.]\n\nDeployment and Maintenance\nDeployment Instructions: [Provide step-by-step instructions for deploying the software.]\n\nConfiguration: [Specify any configuration settings or files required for the software to run properly.]\n\nMaintenance: [Describe the maintenance tasks and procedures, including updating dependencies, monitoring, and troubleshooting.]\n\nUser Documentation\nInstallation Guide: [Provide instructions for installing and setting up the software.]\n\nUser Manual: [Include a comprehensive guide on how to use the software, including examples and screenshots.]\n\nAPI Reference: [Document the public APIs or interfaces exposed by the software, including input/output formats and usage examples.]\n\nTroubleshooting: [Provide common troubleshooting steps and solutions for potential issues.]\n\nExample Input and Output\nExample Input 1:\n\nDescription: [Describe the example input scenario.]\nInput: [Provide a sample input or input format.]\nExpected Output: [Describe the expected output for the given input.]\nExample Input 2:\n\nDescription: [Describe another example input scenario.]\nInput: [Provide a sample input or input format.]\nExpected Output: [Describe the expected output for the given input.]\nAdditional Notes\n[Include any additional information relevant to the project, such as known limitations, future enhancements, or dependencies.]\n"
  },
  {
    "id": 3,
    "title": "S. Adams: Better Writer Style",
    "text": "The Day You Became A Better Writer\nI went from being a bad writer to a good writer after taking a one-day course in “business writing.” I couldn’t believe how simple it was. I’ll tell you the main tricks here so you don’t have to waste a day in class.\n\nBusiness writing is about clarity and persuasion. The main technique is keeping things simple. Simple writing is persuasive. A good argument in five sentences will sway more people than a brilliant argument in a hundred sentences. Don’t fight it.\n\nSimple means getting rid of extra words. Don’t write, “He was very happy” when you can write “He was happy.” You think the word “very” adds something. It doesn’t. Prune your sentences.\n\nHumor writing is a lot like business writing. It needs to be simple. The main difference is in the choice of words. For humor, don’t say “drink” when you can say “swill.”\n\nYour first sentence needs to grab the reader. Go back and read my first sentence to this post. I rewrote it a dozen times. It makes you curious. That’s the key.\n\nWrite short sentences. Avoid putting multiple thoughts in one sentence. Readers aren’t as smart as you’d think.\n\nLearn how brains organize ideas. Readers comprehend “the boy hit the ball” quicker than “the ball was hit by the boy.” Both sentences mean the same, but it’s easier to imagine the object (the boy) before the action (the hitting). All brains work that way. (Notice I didn’t say, “That is the way all brains work”?)\n\nThat’s it. You just learned 80% of the rules of good writing. You’re welcome."
  },
  {
    "id": 4,
    "title": "Kolmodin New Game",
    "text": "**Socratic Questioner Instructions for Guiding Game Mode Design:**\n\nTake the role of Socratic Questioner and ask me about my software idea for a new game mode. Use my answers to provide all requested detail for the \"Comprehensive Software Design Prompt for a New Twitch Chat Game Mode\" below. If I am unsure about an answer, choose the option that would be most popular or logical for this type of game within the existing framework.\n\nThink through this step by step:\n1.  **First Pass (Outline Creation):** Ask high-level questions for each major section (I, II, III, etc.) to get a basic outline of the game idea. Record my answers.\n2.  **Second Pass (Detailed Elaboration - Outlines within Outlines):** For each point within the major sections (e.g., I.1, I.2, II.1), ask more specific, probing questions to flesh out the details. Record my answers. If a subsection itself has sub-points (e.g., VI.1 might have multiple fields for the GameState struct), ask about each of those.\n3.  **Iterative Refinement:** After each answer, confirm understanding and ensure the recorded information accurately reflects my intent for that part of the design document.\n4.  **Completion and Approval:** DO NOT WRITE ANY CODE UNTIL THIS DOCUMENT (the \"Comprehensive Software Design Prompt for a New Twitch Chat Game Mode\" filled with my answers) HAS BEEN COMPLETED AND THE COMPLETE DOCUMENT HAS BEEN APPROVED BY ME.\n\nAsk me these questions one at a time and record my answers directly into the template below.\n\n---\n\n## Comprehensive Software Design Prompt for a New Twitch Chat Game Mode\n\n**Instructions for User/LLM (to be filled by Socratic Questioner based on user's answers):**\n*   This document outlines the design for a new game mode for the Kolmodin Twitch Chat Game Framework.\n*   Please answer each section thoroughly, considering the existing framework patterns seen in games like \"DealNoDeal\" and \"MedAndraOrd\".\n*   The goal is to produce a detailed specification that can be directly translated into Svelte (frontend) and Rust (backend) code.\n*   Focus on defining states, transitions, user interactions (admin and Twitch chat), and data structures.\n*   **Do not write actual code in this design document.** Focus on detailed descriptions, pseudocode for complex logic, and data structure definitions.\n\n---\n\n**I. Project Meta-Information**\n\n1.  **Starting Idea / High-Level Concept:**\n    *   *(Socratic Questioner to fill based on user's answer)*\n2.  **Project Title (New Game Mode Name):**\n    *   *(Socratic Questioner to fill based on user's answer, e.g., \"Twitch Trivia Challenge\", \"Picture Guess Mania\")*\n3.  **Unique Game Type ID (for registration):**\n    *   *(Socratic Questioner to fill based on user's answer, e.g., \"TriviaChallenge\", \"PictureGuess\". Must be unique, typically camelCase or lowercase.)*\n    *   _Framework Note: This ID will be used in `GameType::all()` in Rust and for registering the game store in Svelte._\n\n**II. Game Overview & Core Mechanics**\n\n1.  **Game Overview:**\n    *   *(Socratic Questioner to fill based on user's answer: Describe the purpose, theme, and general flow of the game. How is it played? What's the objective?)*\n2.  **Key Features & Unique Selling Points:**\n    *   *(Socratic Questioner to fill based on user's answer: What makes this game fun or engaging for a Twitch stream?)*\n3.  **Winning/Losing Conditions:**\n    *   *(Socratic Questioner to fill based on user's answer: How does the game end? How is a winner determined (if applicable)? Are there points, rounds, or other metrics?)*\n4.  **Target Audience:**\n    *   Streamer (Admin)\n    *   Twitch Chat Viewers (Players)\n\n**III. Game Phases & State Flow**\n\n1.  **Game Phases:**\n    *   *(Socratic Questioner to fill based on user's answer: List and describe each distinct phase of the game. Consider phases like: Setup, PlayerInput, RoundInProgress, Scoring, RoundEnd, GameOver, etc. For each phase, describe what happens and what transitions are possible.)*\n    *   *Example: Phase 1: QuestionDisplay - A question is shown. Players can submit answers.*\n    *   *Example: Phase 2: AnswerReveal - Correct answer is shown, scores are updated.*\n2.  **State Transition Flowchart:**\n    *   *(Socratic Questioner to fill based on user's answer: Provide a simple flowchart or state diagram showing how the game transitions between the phases defined above. Indicate triggers for transitions.)*\n\n**IV. Functional Requirements: Admin (Streamer) Perspective**\n\n1.  **Admin Inputs & Controls (for `AdminView.svelte`):**\n    *   *(Socratic Questioner to fill based on user's answer: What actions can the admin take during each game phase?)*\n        *   Example: Start Game, Next Round/Question, End Game, Reveal Answer, Modify Settings (if any).\n        *   Consider what buttons/inputs are needed.\n2.  **Information Displayed to Admin (for `AdminView.svelte`):**\n    *   *(Socratic Questioner to fill based on user's answer: What game state information does the admin need to see?)*\n        *   Example: Current phase, current question/word, player scores/leaderboard, recent player inputs/guesses, game timer, game settings.\n3.  **Admin-Triggered Game Settings (if any):**\n    *   *(Socratic Questioner to fill based on user's answer: Can the admin configure any game parameters before or during the game? e.g., round duration, number of questions, difficulty.)*\n\n**V. Functional Requirements: Player (Twitch Chat) Perspective**\n\n1.  **Player Inputs (Twitch Chat Commands/Messages):**\n    *   *(Socratic Questioner to fill based on user's answer: How do players interact with the game via Twitch chat?)*\n        *   Example: Typing answers, specific commands like `!vote A`, `!guess word`.\n        *   How are these inputs validated and parsed?\n2.  **Information Displayed to Players (for `StreamView.svelte`):**\n    *   *(Socratic Questioner to fill based on user's answer: What game information should be visible on the stream overlay?)*\n        *   Example: Current question/puzzle, options (if any), timer, scores, phase announcements, correct answers, winner announcements.\n        *   Consider animations or special visual feedback for events.\n\n**VI. Data Structures & State (Rust Backend & Svelte Frontend `types.ts`)**\n\n1.  **Rust `[NewGameName]GameState` Struct (in `src/game_logic/[new_game_id].rs`):**\n    *   *(Socratic Questioner to fill based on user's answer: Define the fields that will make up the primary game state on the backend. This struct will hold all persistent data for a game instance.)*\n    *   *Example: `current_question_index: usize`, `player_scores: HashMap<String, u32>`, `used_questions: HashSet<String>`, `game_timer_start: Option<Instant>`.*\n2.  **Rust `GamePhase` Enum (in `src/game_logic/[new_game_id].rs`):**\n    *   *(Socratic Questioner to fill based on user's answer: Define the variants for the game phases identified in section III.1. Include any data specific to each phase.)*\n    *   *Example: `Setup`, `Playing { current_word: String, round_timer_ends_at: Instant }`, `GameOver { winner: String }`.*\n3.  **Rust `AdminCommand` Enum (in `src/game_logic/[new_game_id].rs`):**\n    *   *(Socratic Questioner to fill based on user's answer: Define the commands the admin can send from the frontend. These correspond to admin inputs in IV.1.)*\n    *   *Example: `StartGame`, `NextQuestion`, `SetDifficulty { level: u8 }`.*\n4.  **Rust `GameEvent` Enum (in `src/game_logic/[new_game_id].rs`):**\n    *   *(Socratic Questioner to fill based on user's answer: Define events that occur within the game and need to be communicated to the admin frontend or logged. These are distinct from `ServerToClientMessage` payloads but are often wrapped by them.)*\n    *   *Example: `PlayerScored { player: String, points: u32 }`, `QuestionChanged { new_question_text: String }`, `TimerExpired`.*\n5.  **Svelte `types.ts` (Frontend - located at `src/lib/components/games/[NewGameName]/types.ts`):**\n    *   **`[NewGameName]GameState` (Client-side representation):**\n        *   *(Socratic Questioner to fill based on user's answer: How will the admin frontend represent the game state? This is often a direct translation or subset of the Rust `GameState` + `GamePhase` and is received via `FullStateUpdate`.)*\n    *   **`[NewGameName]PublicState` (for `StreamView.svelte`):**\n        *   *(Socratic Questioner to fill based on user's answer: What subset of game state is safe and relevant to show on the stream? This is generated by `getPublicState()` in the Svelte store.)*\n        *   *Example: `phase: { type: string, data?: unknown }`, `currentQuestionText: string | null`, `leaderboard: Array<{ player: string, score: number }>`.*\n    *   **Game-Specific `GameEventData` variants (for Svelte store `processEvent`):**\n        *   *(Socratic Questioner to fill based on user's answer: Define the structure of data for each `GameEvent` variant defined in Rust that the frontend needs to react to. This matches the `event_data` part of a `GameSpecificEvent` from the server.)*\n    *   **Game-Specific `AdminCommand` variants (for Svelte store `actions`):**\n        *   *(Socratic Questioner to fill based on user's answer: Define the structure of data for each `AdminCommand` variant that the frontend sends. This matches the `command_data` part of a `GameSpecificCommand` to the server.)*\n\n**VII. Core Game Logic (Rust Backend `src/game_logic/[new_game_id].rs`)**\n\n1.  **Initialization (`new()` function):**\n    *   *(Socratic Questioner to fill based on user's answer: How is the game state initialized when a new game instance is created? What are the default settings? Does it need access to `WordListManager` data like `MedAndraOrd` does?)*\n2.  **Admin Command Handling (`handle_event` in `GameLogic` trait):**\n    *   *(Socratic Questioner to fill based on user's answer: For each `AdminCommand` defined in VI.3, describe the logic to update the game state and any `GameEvent`s it might trigger.)*\n    *   *Pseudocode for complex commands is highly encouraged.*\n3.  **Twitch Chat Message Handling (`handle_twitch_message` in `GameLogic` trait):**\n    *   *(Socratic Questioner to fill based on user's answer: Describe how incoming Twitch chat messages (player inputs from V.1) are processed. How do they affect game state? What `GameEvent`s might they trigger?)*\n    *   *Detail parsing logic (e.g., extracting a number, a word, a choice).*\n    *   *Consider using `is_guess_acceptable` or similar utility if fuzzy matching is needed.*\n    *   *Pseudocode for message processing is highly encouraged.*\n4.  **Game State Transitions:**\n    *   *(Socratic Questioner to fill based on user's answer: Describe the logic that governs transitions between `GamePhase`s. What conditions trigger a phase change?)*\n    *   *Example: After X correct answers, move to NextRoundPhase. If timer expires, move to RoundEndPhase.*\n5.  **Scoring Logic (if applicable):**\n    *   *(Socratic Questioner to fill based on user's answer: How are points awarded or deducted? How is the leaderboard maintained?)*\n6.  **Timers & Time-based Events (if applicable):**\n    *   *(Socratic Questioner to fill based on user's answer: Does the game involve timers? How are they managed? What happens when a timer expires? Consider if timers are backend-driven or frontend-driven (backend is generally more reliable).)*\n    *   _Framework Note: Backend timers usually involve spawning async tasks or checking `Instant::now()` in a game loop/tick function (which this framework doesn't explicitly have, so events or checks on interaction are more common). `MedAndraOrd` uses `game_start_time: Option<Instant>` and checks elapsed time._\n\n**VIII. Frontend State Management (Svelte `store.svelte.ts` - located at `src/lib/components/games/[NewGameName]/store.svelte.ts`)**\n\n1.  **Initial State (`createInitial[NewGameName]State()`):**\n    *   *(Socratic Questioner to fill based on user's answer: Define the initial state for the Svelte store.)*\n2.  **Actions (exposed by the store):**\n    *   *(Socratic Questioner to fill based on user's answer: List the actions the `AdminView.svelte` will call. These usually correspond to sending `AdminCommand`s to the backend.)*\n    *   *Example: `startGame()`, `submitAdminGuess(guess: string)`.*\n3.  **Event Processing (`processEvent` function):**\n    *   *(Socratic Questioner to fill based on user's answer: How does the Svelte store update its local state when it receives `GameSpecificEvent` messages (like `FullStateUpdate` or custom `GameEvent`s from VI.4) from the backend?)*\n4.  **Public State Generation (`getPublicState()`):**\n    *   *(Socratic Questioner to fill based on user's answer: Describe how the `[NewGameName]PublicState` (for `StreamView.svelte`) is derived from the main Svelte store's game state.)*\n5.  **Stream Event Generation (`streamEventManager`):**\n    *   *(Socratic Questioner to fill based on user's answer: What specific stream events (for animations, popups on `StreamView.svelte`) should be generated by the Svelte store based on game events or state changes?)*\n    *   *Example: On `PlayerScored` event from backend, add a `CORRECT_ANSWER` stream event.*\n\n**IX. Frontend Views (Svelte Components - located in `src/lib/components/games/[NewGameName]/`)**\n\n1.  **`AdminView.svelte` Layout Sketch & Key Components:**\n    *   *(Socratic Questioner to fill based on user's answer: Describe or sketch the layout. What information is displayed where? What UI components (buttons, inputs, cards, leaderboards) are needed? Refer to IV.1 and IV.2.)*\n2.  **`StreamView.svelte` Layout Sketch & Key Visuals:**\n    *   *(Socratic Questioner to fill based on user's answer: Describe or sketch the layout for the stream overlay. How are game elements (question, timer, scores, events) visually presented? Refer to V.2.)*\n    *   *Consider visual styling, animations, and transitions for engaging presentation.*\n3.  **Additional Svelte Components (if any, e.g., in `components/` subdirectory):**\n    *   *(Socratic Questioner to fill based on user's answer: Will this game require any new, reusable Svelte components specific to its display or interaction (e.g., a custom grid, a special voting display)? Describe them.)*\n\n**X. Configuration & Data Dependencies (Rust `config.rs`, `db.rs`)**\n\n1.  **New Configuration Options (if any):**\n    *   *(Socratic Questioner to fill based on user's answer: Does this game require any new global configuration options in `config.rs` or specific settings in `AppSettings`? e.g., default number of rounds, API keys for external services.)*\n2.  **Data Dependencies (e.g., word lists from `db.rs`):**\n    *   *(Socratic Questioner to fill based on user's answer: Does this game need external data like word lists, question banks, or image URLs? If so, how will this data be structured in `GameData` (from `db.rs`) and loaded/accessed by the game logic?)*\n    *   *Specify the section name if using the `[section_name]` format in your data file (e.g., `[new_game_word_list]`).*\n    *   *Will `WordListManager` need new methods or fields to support this data?*\n\n**XI. Error Handling**\n\n1.  **Potential Game-Specific Errors:**\n    *   *(Socratic Questioner to fill based on user's answer: List potential errors specific to this game mode, both backend and frontend.)*\n    *   *Example: Invalid player input, running out of questions, data file for game not found, API call failure if using external services.*\n2.  **Handling Strategy:**\n    *   *(Socratic Questioner to fill based on user's answer: How will these errors be handled? Logged? Notified to admin? Graceful degradation? Specific `SystemError` messages from backend?)*\n\n**XII. Testing Strategy**\n\n1.  **Backend Unit Tests (Rust `src/game_logic/[new_game_id].rs` module tests):**\n    *   *(Socratic Questioner to fill based on user's answer: What key game logic functions or state transitions should have unit tests?)*\n2.  **Frontend Interaction Considerations (Svelte):**\n    *   *(Socratic Questioner to fill based on user's answer: Any specific UI interactions that are critical to test, even conceptually at this stage?)*\n\n**XIII. Additional Notes & Future Enhancements**\n\n1.  **Known Limitations:**\n    *   *(Socratic Questioner to fill based on user's answer: Any simplifications or limitations being made for this initial version?)*\n2.  **Potential Future Enhancements:**\n    *   *(Socratic Questioner to fill based on user's answer: Ideas for future improvements or features for this game mode.)*\n\n---"
  }
]
